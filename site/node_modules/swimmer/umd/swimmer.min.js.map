{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap cc367bedaed4ce3a93e6","webpack:///./src/index.js","webpack:///./node_modules/babel-runtime/regenerator/index.js","webpack:///./node_modules/babel-runtime/node_modules/regenerator-runtime/runtime-module.js","webpack:///./node_modules/babel-runtime/node_modules/regenerator-runtime/runtime.js"],"names":["root","factory","exports","module","define","amd","a","i","self","this","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","tasks","concurrency","_this2","Promise","resolve","reject","pool","createPool","results","onSettled","onError","err","forEach","task","add","_asyncToGenerator","__WEBPACK_IMPORTED_MODULE_0__Users_tannerlinsley_GitHub_swimmer_node_modules_babel_runtime_regenerator___default","mark","_callee2","res","wrap","_context2","prev","next","sent","abrupt","stop","start","defaultConfig","started","_this","config","arguments","length","undefined","_defaultConfig$config","_extends","onSettles","onErrors","onSuccesses","running","active","pending","currentConcurrency","tick","_loop","nextFn","shift","push","_callee","success","error","_context","t0","filter","fn","priority","unShift","throttle","cb","onSuccess","clear","getActive","getPending","getAll","concat","isRunning","isSettled","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","e","global","Op","hasOwn","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","then","result","done","value","toString","keys","key","reverse","pop","Context","reset","skipTempReset","_sent","delegate","method","tryEntries","resetTryEntry","charAt","isNaN","slice","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","state","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","obj","previousPromise","callInvokeWithMethodAndArg","invoke","unwrapped","return","TypeError","info","pushTryEntry","locs","iteratorMethod"],"mappings":"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","file":"swimmer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap cc367bedaed4ce3a93e6","const defaultConfig = {\n  concurrency: 5,\n  started: true,\n  tasks: []\n}\n\nexport function createPool (config = defaultConfig) {\n  const { concurrency, started, tasks } = {\n    ...defaultConfig,\n    ...config\n  }\n\n  let onSettles = []\n  let onErrors = []\n  let onSuccesses = []\n  let running = started\n  let active = []\n  let pending = tasks\n  let currentConcurrency = concurrency\n\n  const tick = () => {\n    if (!running) {\n      return\n    }\n    if (!pending.length && !active.length) {\n      onSettles.forEach(d => d())\n      return\n    }\n    while (active.length < currentConcurrency && pending.length) {\n      const nextFn = pending.shift()\n      active.push(nextFn)\n      /* eslint-disable no-loop-func */\n      ;(async () => {\n        let success = false\n        let res\n        let error\n        try {\n          res = await nextFn()\n          success = true\n        } catch (e) {\n          error = e\n        }\n        active = active.filter(d => d !== nextFn)\n        if (success) {\n          nextFn.resolve(res)\n          onSuccesses.forEach(d => d(res, nextFn))\n        } else {\n          nextFn.reject(error)\n          onErrors.forEach(d => d(error, nextFn))\n        }\n        tick()\n      })()\n      /* eslint-enable no-loop-func */\n    }\n  }\n\n  const api = {\n    add: (fn, priority) =>\n      new Promise((resolve, reject) => {\n        if (priority) {\n          pending.unShift(fn)\n        } else {\n          pending.push(fn)\n        }\n        fn.resolve = resolve\n        fn.reject = reject\n        tick()\n      }),\n    throttle: n => {\n      currentConcurrency = n\n    },\n    onSettled: cb => {\n      onSettles.push(cb)\n      return () => {\n        onSettles = onSettles.filter(d => d !== cb)\n      }\n    },\n    onError: cb => {\n      onErrors.push(cb)\n      return () => {\n        onErrors = onErrors.filter(d => d !== cb)\n      }\n    },\n    onSuccess: cb => {\n      onSuccesses.push(cb)\n      return () => {\n        onSuccesses = onSuccesses.filter(d => d !== cb)\n      }\n    },\n    stop: () => {\n      running = false\n    },\n    start: () => {\n      running = true\n      tick()\n    },\n    clear: () => {\n      pending = []\n    },\n    getActive: () => active,\n    getPending: () => pending,\n    getAll: () => [...active, ...pending],\n    isRunning: () => running,\n    isSettled: () => !running && !active.length && !pending.length\n  }\n\n  return api\n}\n\nexport function poolAll (tasks, concurrency) {\n  return new Promise((resolve, reject) => {\n    const pool = createPool({\n      concurrency\n    })\n    const results = []\n    pool.onSettled(() => {\n      resolve(results)\n    })\n    pool.onError(err => {\n      reject(err)\n    })\n    tasks.forEach((task, i) => {\n      pool.add(async () => {\n        const res = await task()\n        results[i] = res\n        return res\n      })\n    })\n    pool.start()\n  })\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/regenerator/index.js\n// module id = 2\n// module chunks = 0","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/node_modules/regenerator-runtime/runtime-module.js\n// module id = 3\n// module chunks = 0","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/node_modules/regenerator-runtime/runtime.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}