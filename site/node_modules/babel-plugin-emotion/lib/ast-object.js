'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var interleave = function interleave(strings, interpolations) {
  return interpolations.reduce(function (array, interp, i) {
    return array.concat([interp], strings[i + 1]);
  }, [strings[0]]);
};

var ASTObject = function () {
  function ASTObject(src, expressions, t) {
    _classCallCheck(this, ASTObject);

    this.src = src;
    this.expressions = expressions || [];
    this.t = t;
  }

  ASTObject.prototype.getDynamicMatches = function getDynamicMatches(str) {
    var re = /xxx(\d+)xxx/gm;
    var match = void 0;
    var matches = [];
    while ((match = re.exec(str)) !== null) {
      matches.push({
        value: match[0],
        p1: parseInt(match[1], 10),
        index: match.index
      });
    }

    return matches;
  };

  ASTObject.prototype.replacePlaceholdersWithExpressions = function replacePlaceholdersWithExpressions(matches, str) {
    var expressions = this.expressions,
        t = this.t;

    if (expressions.length === 0) {
      if (str === '') {
        return [];
      }
      return [t.stringLiteral(str)];
    }
    var strings = [];
    var finalExpressions = [];
    var cursor = 0;

    matches.forEach(function (_ref, i) {
      var value = _ref.value,
          p1 = _ref.p1,
          index = _ref.index;

      var preMatch = str.substring(cursor, index);
      cursor = cursor + preMatch.length + value.length;
      if (preMatch) {
        strings.push(t.stringLiteral(preMatch));
      } else if (i === 0) {
        strings.push(t.stringLiteral(''));
      }

      finalExpressions.push(expressions[p1]);
      if (i === matches.length - 1) {
        strings.push(t.stringLiteral(str.substring(index + value.length)));
      }
    });

    return interleave(strings, finalExpressions).filter(
    // $FlowFixMe
    function (node) {
      return node.value !== '';
    });
  };

  ASTObject.prototype.toExpressions = function toExpressions() {
    return this.replacePlaceholdersWithExpressions(this.getDynamicMatches(this.src), this.src);
  };

  return ASTObject;
}();

exports.default = ASTObject;